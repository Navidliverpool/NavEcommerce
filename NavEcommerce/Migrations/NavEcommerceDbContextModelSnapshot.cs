// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NavEcommerce.infrastructures.DbContextInstances;

namespace NavEcommerce.Migrations
{
    [DbContext(typeof(NavEcommerceDbContext))]
    partial class NavEcommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BrandDealer", b =>
                {
                    b.Property<int>("BrandsBrandId")
                        .HasColumnType("int");

                    b.Property<int>("DealersDealerId")
                        .HasColumnType("int");

                    b.HasKey("BrandsBrandId", "DealersDealerId");

                    b.HasIndex("DealersDealerId");

                    b.ToTable("BrandDealer");
                });

            modelBuilder.Entity("DealerMotorcycle", b =>
                {
                    b.Property<int>("DealersDealerId")
                        .HasColumnType("int");

                    b.Property<int>("MotorcyclesMotorcycleId")
                        .HasColumnType("int");

                    b.HasKey("DealersDealerId", "MotorcyclesMotorcycleId");

                    b.HasIndex("MotorcyclesMotorcycleId");

                    b.ToTable("DealerMotorcycle");
                });

            modelBuilder.Entity("NavEcommerce.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("NavEcommerce.Models.Dealer", b =>
                {
                    b.Property<int>("DealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("DealerId");

                    b.ToTable("Dealers");
                });

            modelBuilder.Entity("NavEcommerce.Models.Motorcycle", b =>
                {
                    b.Property<int>("MotorcycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("MotorcycleId");

                    b.HasIndex("BrandId");

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("BrandDealer", b =>
                {
                    b.HasOne("NavEcommerce.Models.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NavEcommerce.Models.Dealer", null)
                        .WithMany()
                        .HasForeignKey("DealersDealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DealerMotorcycle", b =>
                {
                    b.HasOne("NavEcommerce.Models.Dealer", null)
                        .WithMany()
                        .HasForeignKey("DealersDealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NavEcommerce.Models.Motorcycle", null)
                        .WithMany()
                        .HasForeignKey("MotorcyclesMotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NavEcommerce.Models.Motorcycle", b =>
                {
                    b.HasOne("NavEcommerce.Models.Brand", "Brand")
                        .WithMany("Motorcycles")
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("NavEcommerce.Models.Brand", b =>
                {
                    b.Navigation("Motorcycles");
                });
#pragma warning restore 612, 618
        }
    }
}
